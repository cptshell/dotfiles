unbind-key -a


# bind ctrl-space to prefix
unbind C-b
set -g prefix C-Space
bind-key C-g send-prefix

set-option -g xterm-keys on

set-option -g status-position top
 
bind \; command-prompt
set-option -g mode-style bg=black,fg=yellow,noreverse

set-window-option -g mode-keys vi

set-option -g status-position top

# toggle statusbar
bind-key b set-option status

# bind-key b search-again            
# bind-key b select-line             

#bind-key S-/ search-backward         

#bind-key ? search-again-in-reverse 
set-option -g focus-events off
#bind-key . search-forward          

set-option -g status-left '#P'


# ctrl+left/right cycles thru windows
#bind-key -n C-j next
#bind-key -n C-k prev
#bind-key -n C-t new-window



bind-key -n S-F1 if-shell 'test "`tmux list-panes | wc -l`" = 1' 'split-window -h' 'split-window -v'


bind-key -n C-1 if-shell "tmux list-windows | grep \^1" 'select-window -t 1' 'new-window -t 1' 
bind-key -n C-2 if-shell "tmux list-windows | grep \^2" 'select-window -t 2' 'new-window -t 2' 
bind-key -n C-3 if-shell "tmux list-windows | grep \^3" 'select-window -t 3' 'new-window -t 3' 
bind-key -n C-4 if-shell "tmux list-windows | grep \^4" 'select-window -t 4' 'new-window -t 4' 
bind-key -n C-5 if-shell "tmux list-windows | grep \^5" 'select-window -t 5' 'new-window -t 5' 
bind-key -n C-6 if-shell "tmux list-windows | grep \^6" 'select-window -t 6' 'new-window -t 6' 
bind-key -n C-7 if-shell "tmux list-windows | grep \^7" 'select-window -t 7' 'new-window -t 7' 
bind-key -n C-8 if-shell "tmux list-windows | grep \^8" 'select-window -t 8' 'new-window -t 8' 
bind-key -n C-9 if-shell "tmux list-windows | grep \^9" 'select-window -t 9' 'new-window -t 9' 
 


bind-key -r "<" swap-window -t -1
bind-key -r ">" swap-window -t +1

bind-key -r f resize-pane -Z


bind-key -r H resize-pane -L 20
bind-key -r J resize-pane -D 20
bind-key -r K resize-pane -U 20
bind-key -r L resize-pane -R 20

bind-key -n C-h select-pane -L
bind-key -n C-j select-pane -D
bind-key -n C-k select-pane -U
bind-key -n C-l select-pane -R



bind-key -t vi-edit C-u delete-line
bind-key -t vi-edit C-w delete-line


#set -g window-active-style fg=default,bg=default
set -g pane-active-border-style  fg=black

set -ga pane-border-style bg=black
set -ga pane-border-style fg=colour250,bright
 
set -g pane-active-border-style bg=black

# set the pane border colors 
set -g pane-border-fg red
#set -g pane-border-bg default
#set -g pane-active-border-fg default
#set -g pane-active-border-bg default


setw -g mode-bg colour6
setw -g mode-fg colour0

set -g pane-border-fg red
set -g pane-active-border-fg red

setw -g window-active-style bg=colour233,fg=colour255
setw -g window-style bg=colour233,fg=colour250,bright




#set-window-option -g pane-active-border-style ''
#colour238
#colour239
#colour240

bind-key -n S-F1 if-shell 'test "`tmux list-panes | wc -l`" = 1' 'split-window -h' 'split-window -v'

# open a man page in new window
bind / command-prompt "split-window 'exec man %%'"

# quick view of processes
bind '~' split-window "exec htop"

# scrollback buffer n lines
set -g history-limit 100000

# listen for activity on all windows
set -g bell-action any

# on-screen time for display-panes in ms
set -g display-panes-time 2000

# start window indexing at one instead of zero
set -g base-index 1

# enable wm window titles
set -g set-titles off

# wm window title string (uses statusbar variables)
set -g set-titles-string "#T"

set -s escape-time 1

setw -g monitor-activity on
set -g visual-activity off

set -wg  word-separators '&!#$({[>/ '

# statusbar --------------------------------------------------------------

set -g display-time 2000

# default statusbar colors
set -g status-fg white
set -g status-bg black
set -g status-attr bold

# default window title colors
set-window-option -g window-status-fg white
set-window-option -g window-status-bg default
set-window-option -g window-status-attr bright

# active window title colors
set-window-option -g window-status-current-fg red
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bold

# command/message line colors
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# center align the window list
set -g status-justify left

# show some useful stats but only when tmux is started 
# outside of Xorg, otherwise dwm statusbar shows these already
set -g status-right ""
set -g status-left ""
if '[ -z "$DISPLAY" ]' 'set -g status-left "[#[fg=green] #H #[default]]"'
if '[ -z "$DISPLAY" ]' 'set -g status-right "[ #[fg=magenta]#(cat /proc/loadavg | cut -d \" \" -f 1,2,3)#[default] ][ #[fg=cyan,bright]%a %Y-%m-%d %H:%M #[default]]"'
if '[ -z "$DISPLAY" ]' 'set -g status-right-length 50'

set -g default-terminal "screen-256color"


# clipboard
# bind-key -t vi-copy y copy-pipe "xclip -i -sel clip > /dev/null"
bind-key p run "xclip -o -sel clip | tmux load-buffer -"



#add [%s] if zoomed 
setw -g window-status-format  "#{?window_zoomed_flag,[,}#I#{?window_zoomed_flag,],}"
setw -g window-status-current-format  "#{?window_zoomed_flag,#[fg=red][,}#I#{?window_zoomed_flag,#[fg=red]],}"

bind Space send-prefix 
bind C-Space send-prefix 

bind p paste-buffer # `prefix + p` pastes the latest buffer
#opy-mode # `tmux prefix + Escape` starts copy mode.
#bind-key -n C-"[" copy-mode


# in copy modeâ€¦
# bind -t vi-copy y copy-selection # `y` copies the current selection to one of tmux's "paste buffers"
# bind -t vi-copy V rectangle-toggle # `V` changes between line- and columnwise selection

bind -t vi-copy v begin-selection # `v` begins a selection. (movement keys to select the desired bits)
bind -t vi-copy Y copy-end-of-line # ^1
bind + delete-buffer

bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard'


bind r source-file ~/.tmux.conf ; display-message "Configuration reloaded."


# plugins

run-shell ~/.tmux/tmux-yank/yank.tmux
